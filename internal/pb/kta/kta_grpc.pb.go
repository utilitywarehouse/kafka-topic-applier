// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/kta.proto

package kta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopicBotClient is the client API for TopicBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicBotClient interface {
	Create(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Topics, error)
	Delete(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type topicBotClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicBotClient(cc grpc.ClientConnInterface) TopicBotClient {
	return &topicBotClient{cc}
}

func (c *topicBotClient) Create(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kta.TopicBot/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicBotClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Topics, error) {
	out := new(Topics)
	err := c.cc.Invoke(ctx, "/kta.TopicBot/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicBotClient) Delete(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kta.TopicBot/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicBotServer is the server API for TopicBot service.
// All implementations should embed UnimplementedTopicBotServer
// for forward compatibility
type TopicBotServer interface {
	Create(context.Context, *Topic) (*emptypb.Empty, error)
	List(context.Context, *emptypb.Empty) (*Topics, error)
	Delete(context.Context, *Topic) (*emptypb.Empty, error)
}

// UnimplementedTopicBotServer should be embedded to have forward compatible implementations.
type UnimplementedTopicBotServer struct {
}

func (UnimplementedTopicBotServer) Create(context.Context, *Topic) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTopicBotServer) List(context.Context, *emptypb.Empty) (*Topics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTopicBotServer) Delete(context.Context, *Topic) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeTopicBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicBotServer will
// result in compilation errors.
type UnsafeTopicBotServer interface {
	mustEmbedUnimplementedTopicBotServer()
}

func RegisterTopicBotServer(s grpc.ServiceRegistrar, srv TopicBotServer) {
	s.RegisterService(&TopicBot_ServiceDesc, srv)
}

func _TopicBot_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicBotServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kta.TopicBot/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicBotServer).Create(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicBot_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicBotServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kta.TopicBot/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicBotServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicBot_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicBotServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kta.TopicBot/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicBotServer).Delete(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

// TopicBot_ServiceDesc is the grpc.ServiceDesc for TopicBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopicBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kta.TopicBot",
	HandlerType: (*TopicBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TopicBot_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TopicBot_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TopicBot_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kta.proto",
}
